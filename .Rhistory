#N: 总人口数，表示被建模系统的总人口数量。
# 定义时间范围
times <- seq(0, 100, by = 1)
# 定义模型
model <- function(t, y, param) {
with(as.list(c(param, y)), {
dS <- mu * (N - S) - beta1 * S * (I1 + I2) / N
dE <- beta1 * S * (I1 + I2) / N - mu * E - gamma1 * E
dI1 <- gamma1 * E - delta * I1
dI2 <- delta * I1 - gamma2 * I2
dR <- gamma2 * I2 - mu * R
return(list(c(dS, dE, dI1, dI2, dR)))
})
}
# 调用常微分方程求解函数
result <- deSolve::ode(y = init, times = times, func = model, parms = param)
result <- as.data.frame(result)
# 绘制仿真结果
seirplot <- ggplot(data = result) +
geom_line(aes(x = time, y = S, col = "S"), size = 2) +
geom_line(aes(x = time, y = I1, col = "I1"), size = 2) +
geom_line(aes(x = time, y = I2, col = "I2"), size = 2) +
geom_line(aes(x = time, y = E, col = "E"), size = 2) +
geom_line(aes(x = time, y = R, col = "R"), size = 2) +
labs(x = "Time", y = "Population", color = "Group") +
scale_color_manual(values = c("S" = "orange", "E" = "purple", "I1" = "red", "I2" = "blue", "R" = "green")) +
theme_minimal()
# 返回仿真结果
return(list(result = result, plot = seirplot))
}
# 调用函数并获得仿真结果
simulation_result <- simulate_SEIR_model()
# 打印仿真结果
print(simulation_result$result)
# 绘制仿真结果图
print(simulation_result$plot)
# 保存绘图结果为矢量文件
ggsave(simulation_result$plot, file = "Y.ODEDiff.pdf", width = 7, height = 6)
# 加载所需的库
library(deSolve)
library(ggplot2)
# 定义函数，用于求解 SEIR 模型的常微分方程组并可视化仿真结果
simulate_SEIR_model <- function() {
# 定义初始状态
init <- c(S = 0.99, E = 0.01, I1 = 0.00, I2 = 0.00, R = 0.00)
#S：易感人群比例，表示还没有被感染的人数比例。
#E：潜伏期人数比例，表示已经感染但还没有发病的人数比例。
#I1：首次感染人数比例，表示正在经历首次感染的人数比例。
#I2：二次感染人数比例，表示正在经历二次感染的人数比例。
#R：康复人数比例，表示已经康复的人数比例。
# 定义参数
param <- c(beta1 = 0.4, gamma1 = 0.2, delta = 0.1, gamma2 = 0.15, mu = 0.05, N = 10)
#beta1: 首次感染率，表示一个易感个体每单位时间被感染的速率。
#gamma1: 首次感染恢复率，表示一个潜伏期个体每单位时间被恢复的速率。
#delta: 二次感染率，表示一个一次感染个体每单位时间被感染的速率。
#gamma2: 二次感染恢复率，表示一个二次感染个体每单位时间被恢复的速率。
#mu: 康复率，表示一个感染个体每单位时间被康复的速率。
#N: 总人口数，表示被建模系统的总人口数量。
# 定义时间范围
times <- seq(0, 100, by = 1)
# 定义模型
model <- function(t, y, param) {
with(as.list(c(param, y)), {
dS <- mu * (N - S) - beta1 * S * (I1 + I2) / N
dE <- beta1 * S * (I1 + I2) / N - mu * E - gamma1 * E
dI1 <- gamma1 * E - delta * I1
dI2 <- delta * I1 - gamma2 * I2
dR <- gamma2 * I2 - mu * R
return(list(c(dS, dE, dI1, dI2, dR)))
})
}
# 调用常微分方程求解函数
result <- deSolve::ode(y = init, times = times, func = model, parms = param)
result <- as.data.frame(result)
# 绘制仿真结果
seirplot <- ggplot(data = result) +
geom_line(aes(x = time, y = S, col = "S"), size = 2) +
geom_line(aes(x = time, y = I1, col = "I1"), size = 2) +
geom_line(aes(x = time, y = I2, col = "I2"), size = 2) +
geom_line(aes(x = time, y = E, col = "E"), size = 2) +
geom_line(aes(x = time, y = R, col = "R"), size = 2) +
labs(x = "Time", y = "Population", color = "Group") +
scale_color_manual(values = c("S" = "orange", "E" = "purple", "I1" = "red", "I2" = "blue", "R" = "green")) +
theme_minimal()
# 返回仿真结果
return(list(result = result, plot = seirplot))
}
# 调用函数并获得仿真结果
simulation_result <- simulate_SEIR_model()
# 打印仿真结果
print(simulation_result$result)
# 绘制仿真结果图
print(simulation_result$plot)
# 保存绘图结果为矢量文件
ggsave(simulation_result$plot, file = "Y.ODEDiff.pdf", width = 7, height = 6)
# 加载所需的库
library(deSolve)
library(igraph)
library(ggplot2)
# 定义函数，用于求解 SEIR 模型的常微分方程组并可视化仿真结果和流程图
simulate_SEIR_model <- function() {
# 定义初始状态
init <- c(S = 0.99, E = 0.01, I1 = 0.00, I2 = 0.00, R = 0.00)
# 定义参数
param <- c(beta1 = 0.4, gamma1 = 0.2, delta = 0.1, gamma2 = 0.15, mu = 0.05, N = 10)
# 定义时间范围
times <- seq(0, 100, by = 1)
# 定义模型
model <- function(t, y, param) {
with(as.list(c(param, y)), {
dS <- mu * (N - S) - beta1 * S * (I1 + I2) / N
dE <- beta1 * S * (I1 + I2) / N - mu * E - gamma1 * E
dI1 <- gamma1 * E - delta * I1
dI2 <- delta * I1 - gamma2 * I2
dR <- gamma2 * I2 - mu * R
return(list(c(dS, dE, dI1, dI2, dR)))
})
}
# 调用常微分方程求解函数
result <- deSolve::ode(y = init, times = times, func = model, parms = param)
result <- as.data.frame(result)
# 绘制仿真结果
seirplot <- ggplot(data = result) +
geom_line(aes(x = time, y = S, col = "S"), size = 2) +
geom_line(aes(x = time, y = I1, col = "I1"), size = 2) +
geom_line(aes(x = time, y = I2, col = "I2"), size = 2) +
geom_line(aes(x = time, y = E, col = "E"), size = 2) +
geom_line(aes(x = time, y = R, col = "R"), size = 2) +
labs(x = "Time", y = "Population", color = "Group") +
scale_color_manual(values = c("S" = "orange", "E" = "purple", "I1" = "red", "I2" = "blue", "R" = "green")) +
theme_minimal()
# 构建转移矩阵
transitions <- matrix(c(0, param["beta1"], 0, 0, 0,
0, 0, param["gamma1"], 0, 0,
0, 0, 0, param["delta"], 0,
0, 0, 0, 0, param["gamma2"],
0, 0, 0, 0, 0), ncol = 5, byrow = TRUE,
dimnames = list(c("S", "E", "I1", "I2", "R"), c("S", "E", "I1", "I2", "R")))
# 绘制流程图
transitions_graph <- graph_from_adjacency_matrix(transitions, mode = "directed", weighted = TRUE)
# 添加节点标签
V(transitions_graph)$label <- c("S", "E", "I1", "I2", "R")
# 设置节点和边的属性
E(transitions_graph)$arrow.size <- 0.5
E(transitions_graph)$color <- "gray"
V(transitions_graph)$color <- "lightblue"
V(transitions_graph)$size <- 15
# 绘制流程图
graph_plot <- plot(transitions_graph, layout = layout_with_kk)
# 返回仿真结果和流程图
return(list(result = result, plot = seirplot, graph = graph_plot))
}
# 调用函数并获得仿真结果和流程图
simulation_result <- simulate_SEIR_model()
# 打印仿真结果
print(simulation_result$result)
# 绘制仿真结果图
print(simulation_result$plot)
# 绘制流程图
print(simulation_result$graph)
# 保存绘图结果为矢量文件
ggsave(simulation_result$plot, file = "seir_simulation_plot.pdf", width = 7, height = 6)
# 加载所需的库
library(deSolve)
library(igraph)
library(ggplot2)
# 定义函数，用于求解 SEIR 模型的常微分方程组并可视化仿真结果和流程图
simulate_SEIR_model <- function() {
# 定义初始状态
init <- c(S = 0.99, E = 0.01, I1 = 0.00, I2 = 0.00, R = 0.00)
# 定义参数
param <- c(beta1 = 0.4, gamma1 = 0.2, delta = 0.1, gamma2 = 0.15, mu = 0.05, N = 10)
# 定义时间范围
times <- seq(0, 100, by = 1)
# 定义模型
model <- function(t, y, param) {
with(as.list(c(param, y)), {
dS <- mu * (N - S) - beta1 * S * (I1 + I2) / N
dE <- beta1 * S * (I1 + I2) / N - mu * E - gamma1 * E
dI1 <- gamma1 * E - delta * I1
dI2 <- delta * I1 - gamma2 * I2
dR <- gamma2 * I2 - mu * R
return(list(c(dS, dE, dI1, dI2, dR)))
})
}
# 调用常微分方程求解函数
result <- deSolve::ode(y = init, times = times, func = model, parms = param)
result <- as.data.frame(result)
# 绘制仿真结果
seirplot <- ggplot(data = result) +
geom_line(aes(x = time, y = S, col = "S"), size = 2) +
geom_line(aes(x = time, y = I1, col = "I1"), size = 2) +
geom_line(aes(x = time, y = I2, col = "I2"), size = 2) +
geom_line(aes(x = time, y = E, col = "E"), size = 2) +
geom_line(aes(x = time, y = R, col = "R"), size = 2) +
labs(x = "Time", y = "Population", color = "Group") +
scale_color_manual(values = c("S" = "orange", "E" = "purple", "I1" = "red", "I2" = "blue", "R" = "green")) +
theme_minimal()
# 构建转移矩阵
transitions <- matrix(c(0, param["beta1"], 0, 0, 0,
0, 0, param["gamma1"], 0, 0,
0, 0, 0, param["delta"], 0,
0, 0, 0, 0, param["gamma2"],
0, 0, 0, 0, 0), ncol = 5, byrow = TRUE,
dimnames = list(c("S", "E", "I1", "I2", "R"), c("S", "E", "I1", "I2", "R")))
# 绘制流程图
transitions_graph <- graph_from_adjacency_matrix(transitions, mode = "directed", weighted = TRUE)
# 添加节点标签
V(transitions_graph)$label <- c("S", "E", "I1", "I2", "R")
# 设置节点和边的属性
E(transitions_graph)$arrow.size <- 0.5
E(transitions_graph)$color <- "gray"
V(transitions_graph)$color <- "lightblue"
V(transitions_graph)$size <- 15
# 绘制流程图
graph_plot <- plot(transitions_graph, layout = layout_with_kk)
# 返回仿真结果和流程图
return(list(result = result, plot = seirplot, graph = graph_plot))
}
# 调用函数并获得仿真结果和流程图
simulation_result <- simulate_SEIR_model()
# 打印仿真结果
print(simulation_result$result)
# 绘制仿真结果图
print(simulation_result$plot)
# 绘制流程图
print(simulation_result$graph)
# 保存绘图结果为矢量文件
ggsave(simulation_result$plot, file = "Y.ODEDiff1.pdf", width = 7, height = 6)
ggsave(simulation_result$graph, file = "Y.ODEDiff2.pdf", width = 7, height = 6)
# 加载所需的库
library(deSolve)
library(igraph)
library(ggplot2)
# 定义函数，用于求解 SEIR 模型的常微分方程组并可视化仿真结果和流程图
simulate_SEIR_model <- function() {
# 定义初始状态
init <- c(S = 0.99, E = 0.01, I1 = 0.00, I2 = 0.00, R = 0.00)
# 定义参数
param <- c(beta1 = 0.4, gamma1 = 0.2, delta = 0.1, gamma2 = 0.15, mu = 0.05, N = 10)
# 定义时间范围
times <- seq(0, 100, by = 1)
# 定义模型
model <- function(t, y, param) {
with(as.list(c(param, y)), {
dS <- mu * (N - S) - beta1 * S * (I1 + I2) / N
dE <- beta1 * S * (I1 + I2) / N - mu * E - gamma1 * E
dI1 <- gamma1 * E - delta * I1
dI2 <- delta * I1 - gamma2 * I2
dR <- gamma2 * I2 - mu * R
return(list(c(dS, dE, dI1, dI2, dR)))
})
}
# 调用常微分方程求解函数
result <- deSolve::ode(y = init, times = times, func = model, parms = param)
result <- as.data.frame(result)
# 绘制仿真结果
seirplot <- ggplot(data = result) +
geom_line(aes(x = time, y = S, col = "S"), size = 2) +
geom_line(aes(x = time, y = I1, col = "I1"), size = 2) +
geom_line(aes(x = time, y = I2, col = "I2"), size = 2) +
geom_line(aes(x = time, y = E, col = "E"), size = 2) +
geom_line(aes(x = time, y = R, col = "R"), size = 2) +
labs(x = "Time", y = "Population", color = "Group") +
scale_color_manual(values = c("S" = "orange", "E" = "purple", "I1" = "red", "I2" = "blue", "R" = "green")) +
theme_minimal()
# 构建转移矩阵
transitions <- matrix(c(0, param["beta1"], 0, 0, 0,
0, 0, param["gamma1"], 0, 0,
0, 0, 0, param["delta"], 0,
0, 0, 0, 0, param["gamma2"],
0, 0, 0, 0, 0), ncol = 5, byrow = TRUE,
dimnames = list(c("S", "E", "I1", "I2", "R"), c("S", "E", "I1", "I2", "R")))
# 绘制流程图
transitions_graph <- graph_from_adjacency_matrix(transitions, mode = "directed", weighted = TRUE)
# 添加节点标签
V(transitions_graph)$label <- c("S", "E", "I1", "I2", "R")
# 设置节点和边的属性
E(transitions_graph)$arrow.size <- 0.5
E(transitions_graph)$color <- "gray"
V(transitions_graph)$color <- "lightblue"
V(transitions_graph)$size <- 15
# 绘制流程图
graph_plot <- plot(transitions_graph, layout = layout_with_kk)
# 返回仿真结果和流程图
return(list(result = result, plot = seirplot, graph = graph_plot))
}
# 调用函数并获得仿真结果和流程图
simulation_result <- simulate_SEIR_model()
# 打印仿真结果
print(simulation_result$result)
# 绘制仿真结果图
print(simulation_result$plot)
# 绘制流程图
print(simulation_result$graph)
# 保存绘图结果为矢量文件
ggsave(simulation_result$plot, file = "Y.ODEDiff1.pdf", width = 7, height = 6)
# 保存流程图
pdf("Y.ODEDiff_graph.pdf", width = 7, height = 6)
print(simulation_result$graph)
dev.off()
# 加载所需的库
library(deSolve)
library(igraph)
library(ggplot2)
# 定义函数，用于求解 SEIR 模型的常微分方程组并可视化仿真结果和流程图
simulate_SEIR_model <- function() {
# 定义初始状态
init <- c(S = 0.99, E = 0.01, I1 = 0.00, I2 = 0.00, R = 0.00)
# 定义参数
param <- c(beta1 = 0.4, gamma1 = 0.2, delta = 0.1, gamma2 = 0.15, mu = 0.05, N = 10)
# 定义时间范围
times <- seq(0, 100, by = 1)
# 定义模型
model <- function(t, y, param) {
with(as.list(c(param, y)), {
dS <- mu * (N - S) - beta1 * S * (I1 + I2) / N
dE <- beta1 * S * (I1 + I2) / N - mu * E - gamma1 * E
dI1 <- gamma1 * E - delta * I1
dI2 <- delta * I1 - gamma2 * I2
dR <- gamma2 * I2 - mu * R
return(list(c(dS, dE, dI1, dI2, dR)))
})
}
# 调用常微分方程求解函数
result <- deSolve::ode(y = init, times = times, func = model, parms = param)
result <- as.data.frame(result)
# 绘制仿真结果
seirplot <- ggplot(data = result) +
geom_line(aes(x = time, y = S, col = "S"), size = 2) +
geom_line(aes(x = time, y = I1, col = "I1"), size = 2) +
geom_line(aes(x = time, y = I2, col = "I2"), size = 2) +
geom_line(aes(x = time, y = E, col = "E"), size = 2) +
geom_line(aes(x = time, y = R, col = "R"), size = 2) +
labs(x = "Time", y = "Population", color = "Group") +
scale_color_manual(values = c("S" = "orange", "E" = "purple", "I1" = "red", "I2" = "blue", "R" = "green")) +
theme_minimal()
# 构建转移矩阵
transitions <- matrix(c(0, param["beta1"], 0, 0, 0,
0, 0, param["gamma1"], 0, 0,
0, 0, 0, param["delta"], 0,
0, 0, 0, 0, param["gamma2"],
0, 0, 0, 0, 0), ncol = 5, byrow = TRUE,
dimnames = list(c("S", "E", "I1", "I2", "R"), c("S", "E", "I1", "I2", "R")))
# 绘制流程图
transitions_graph <- graph_from_adjacency_matrix(transitions, mode = "directed", weighted = TRUE)
# 添加节点标签
V(transitions_graph)$label <- c("S", "E", "I1", "I2", "R")
# 设置节点和边的属性
E(transitions_graph)$arrow.size <- 0.5
E(transitions_graph)$color <- "gray"
V(transitions_graph)$color <- "lightblue"
V(transitions_graph)$size <- 15
# 绘制流程图
graph_plot <- plot(transitions_graph, layout = layout_with_kk)
# 返回仿真结果和流程图
return(list(result = result, plot = seirplot, graph = graph_plot))
}
# 调用函数并获得仿真结果和流程图
simulation_result <- simulate_SEIR_model()
# 打印仿真结果
print(simulation_result$result)
# 绘制仿真结果图
print(simulation_result$plot)
# 绘制流程图
print(simulation_result$graph)
# 保存绘图结果为矢量文件
ggsave(simulation_result$plot, file = "Y.ODEDiff_plot.pdf", width = 7, height = 6)
# 保存流程图
pdf("Y.ODEDiff_graph.pdf", width = 7, height = 6)
print(simulation_result$graph)
dev.off()
# 加载所需的库
library(deSolve)
library(igraph)
library(ggplot2)
# 定义函数，用于求解 SEIR 模型的常微分方程组并可视化仿真结果和流程图
simulate_SEIR_model <- function() {
# 定义初始状态
init <- c(S = 0.99, E = 0.01, I1 = 0.00, I2 = 0.00, R = 0.00)
# 定义参数
param <- c(beta1 = 0.4, gamma1 = 0.2, delta = 0.1, gamma2 = 0.15, mu = 0.05, N = 10)
# 定义时间范围
times <- seq(0, 100, by = 1)
# 定义模型
model <- function(t, y, param) {
with(as.list(c(param, y)), {
dS <- mu * (N - S) - beta1 * S * (I1 + I2) / N
dE <- beta1 * S * (I1 + I2) / N - mu * E - gamma1 * E
dI1 <- gamma1 * E - delta * I1
dI2 <- delta * I1 - gamma2 * I2
dR <- gamma2 * I2 - mu * R
return(list(c(dS, dE, dI1, dI2, dR)))
})
}
# 调用常微分方程求解函数
result <- deSolve::ode(y = init, times = times, func = model, parms = param)
result <- as.data.frame(result)
# 绘制仿真结果
seirplot <- ggplot(data = result) +
geom_line(aes(x = time, y = S, col = "S"), size = 2) +
geom_line(aes(x = time, y = I1, col = "I1"), size = 2) +
geom_line(aes(x = time, y = I2, col = "I2"), size = 2) +
geom_line(aes(x = time, y = E, col = "E"), size = 2) +
geom_line(aes(x = time, y = R, col = "R"), size = 2) +
labs(x = "Time", y = "Population", color = "Group") +
scale_color_manual(values = c("S" = "orange", "E" = "purple", "I1" = "red", "I2" = "blue", "R" = "green")) +
theme_minimal()
# 构建转移矩阵
transitions <- matrix(c(0, param["beta1"], 0, 0, 0,
0, 0, param["gamma1"], 0, 0,
0, 0, 0, param["delta"], 0,
0, 0, 0, 0, param["gamma2"],
0, 0, 0, 0, 0), ncol = 5, byrow = TRUE,
dimnames = list(c("S", "E", "I1", "I2", "R"), c("S", "E", "I1", "I2", "R")))
# 绘制流程图
transitions_graph <- graph_from_adjacency_matrix(transitions, mode = "directed", weighted = TRUE)
# 添加节点标签
V(transitions_graph)$label <- c("S", "E", "I1", "I2", "R")
# 设置节点和边的属性
E(transitions_graph)$arrow.size <- 0.5
E(transitions_graph)$color <- "gray"
V(transitions_graph)$color <- "lightblue"
V(transitions_graph)$size <- 15
# 绘制流程图
graph_plot <- plot(transitions_graph, layout = layout_with_kk)
# 返回仿真结果和流程图
return(list(result = result, plot = seirplot, graph = graph_plot))
}
# 调用函数并获得仿真结果和流程图
simulation_result <- simulate_SEIR_model()
# 打印仿真结果
print(simulation_result$result)
# 绘制仿真结果图
print(simulation_result$plot)
# 绘制流程图
print(simulation_result$graph)
# 保存绘图结果为矢量文件
ggsave(simulation_result$plot, file = "Y.ODEDiff_plot.pdf", width = 7, height = 6)
# 保存流程图
# 保存流程图为 PDF 文件
pdf("Y.ODEDiff_graph.pdf", width = 7, height = 6)
plot(simulation_result$graph, layout = layout_with_kk)
# 加载所需的库
library(deSolve)
library(igraph)
library(ggplot2)
# 定义函数，用于求解 SEIR 模型的常微分方程组并可视化仿真结果和流程图
simulate_SEIR_model <- function() {
# 定义初始状态
init <- c(S = 0.99, E = 0.01, I1 = 0.00, I2 = 0.00, R = 0.00)
# 定义参数
param <- c(beta1 = 0.4, gamma1 = 0.2, delta = 0.1, gamma2 = 0.15, mu = 0.05, N = 10)
# 定义时间范围
times <- seq(0, 100, by = 1)
# 定义模型
model <- function(t, y, param) {
with(as.list(c(param, y)), {
dS <- mu * (N - S) - beta1 * S * (I1 + I2) / N
dE <- beta1 * S * (I1 + I2) / N - mu * E - gamma1 * E
dI1 <- gamma1 * E - delta * I1
dI2 <- delta * I1 - gamma2 * I2
dR <- gamma2 * I2 - mu * R
return(list(c(dS, dE, dI1, dI2, dR)))
})
}
# 调用常微分方程求解函数
result <- deSolve::ode(y = init, times = times, func = model, parms = param)
result <- as.data.frame(result)
# 绘制仿真结果
seirplot <- ggplot(data = result) +
geom_line(aes(x = time, y = S, col = "S"), size = 2) +
geom_line(aes(x = time, y = I1, col = "I1"), size = 2) +
geom_line(aes(x = time, y = I2, col = "I2"), size = 2) +
geom_line(aes(x = time, y = E, col = "E"), size = 2) +
geom_line(aes(x = time, y = R, col = "R"), size = 2) +
labs(x = "Time", y = "Population", color = "Group") +
scale_color_manual(values = c("S" = "orange", "E" = "purple", "I1" = "red", "I2" = "blue", "R" = "green")) +
theme_minimal()
# 构建转移矩阵
transitions <- matrix(c(0, param["beta1"], 0, 0, 0,
0, 0, param["gamma1"], 0, 0,
0, 0, 0, param["delta"], 0,
0, 0, 0, 0, param["gamma2"],
0, 0, 0, 0, 0), ncol = 5, byrow = TRUE,
dimnames = list(c("S", "E", "I1", "I2", "R"), c("S", "E", "I1", "I2", "R")))
# 绘制流程图
transitions_graph <- graph_from_adjacency_matrix(transitions, mode = "directed", weighted = TRUE)
# 添加节点标签
V(transitions_graph)$label <- c("S", "E", "I1", "I2", "R")
# 设置节点和边的属性
E(transitions_graph)$arrow.size <- 0.5
E(transitions_graph)$color <- "gray"
V(transitions_graph)$color <- "lightblue"
V(transitions_graph)$size <- 15
# 绘制流程图
graph_plot <- plot(transitions_graph, layout = layout_with_kk)
# 返回仿真结果和流程图
return(list(result = result, plot = seirplot, graph = graph_plot))
}
# 调用函数并获得仿真结果和流程图
simulation_result <- simulate_SEIR_model()
# 打印仿真结果
print(simulation_result$result)
# 绘制仿真结果图
print(simulation_result$plot)
# 绘制流程图
print(simulation_result$graph)
# 保存绘图结果为矢量文件
ggsave(simulation_result$plot, file = "Y.ODEDiff_plot.pdf", width = 7, height = 6)
# 保存流程图为 PDF 文件
ggsave(simulation_result$graph, file = "Y.ODEDiff_graph.pdf", width = 7, height = 6)
